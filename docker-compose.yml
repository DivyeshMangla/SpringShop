services:
  eureka-server:
    build:
      context: ./eureka-server
    ports:
      - "8761:8761"
    networks:
      - spring-shop-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://eureka-server:8761/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 15
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  config-server:
    build:
      context: ./config-server
    ports:
      - "8888:8888"
    networks:
      - spring-shop-net
    depends_on:
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://config-server:8888/actuator/health"]
      interval: 20s
      timeout: 10s
      retries: 15
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  product-service:
    build:
      context: ./product-service
    ports:
      - "8082:8082"
    networks:
      - spring-shop-net
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://product-service:8082/actuator/health"]
      interval: 30s
      timeout: 20s
      retries: 15
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M

  user-service:
    build:
      context: ./user-service
    ports:
      - "8083:8083"
    networks:
      - spring-shop-net
    depends_on:
      config-server:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://user-service:8083/actuator/health"]
      interval: 30s
      timeout: 20s
      retries: 15
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M

  order-service:
    build:
      context: ./order-service
    ports:
      - "8084:8084"
    networks:
      - spring-shop-net
    depends_on:
      config-server:
        condition: service_healthy
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://order-service:8084/actuator/health"]
      interval: 30s
      timeout: 20s
      retries: 15
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M

  api-gateway:
    build:
      context: ./api-gateway
    ports:
      - "8081:8081"
    networks:
      - spring-shop-net
    depends_on:
      eureka-server:
        condition: service_healthy
      config-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://api-gateway:8081/actuator/health"]
      interval: 30s
      timeout: 20s
      retries: 15
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  postgresql:
    image: postgres:latest
    ports:
      - "5432:5432"
    networks:
      - spring-shop-net
    environment:
      - POSTGRES_DB=spring_shop_users_db
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d spring_shop_users_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    networks:
      - spring-shop-net
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    volumes:
      - mongo_data:/data/db

networks:
  spring-shop-net:
    driver: bridge

volumes:
  postgres_data:
  mongo_data: